# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/PreprocTest.cpp"
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/PreprocTest.cpp"
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_common.h" 1
# 13 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_common.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 427 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 428 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 429 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4



# 30 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 97 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 2 3 4
# 14 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_common.h" 2
# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 207 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 244 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 261 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 278 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 44 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 47 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 50 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
# 181 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 337 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 673 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 727 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 782 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 808 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 818 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 857 "/usr/include/wchar.h" 3 4
}
# 15 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_common.h" 2
# 35 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_common.h"

# 35 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_common.h"
typedef wchar_t wchar;

typedef int8_t b8;

typedef int8_t s8;
typedef uint8_t u8;

typedef int16_t s16;
typedef uint16_t u16;

typedef int32_t s32;
typedef uint32_t u32;

typedef int64_t s64;
typedef uint64_t u64;

typedef float r32;
typedef double r64;

const r32 TAU = 6.2831853071f;
# 2 "/home/amos/prog/c/amos_libraries/preprocessor/test/PreprocTest.cpp" 2
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 1
# 27 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4

# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 426 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 28 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 2



# 30 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
extern "C" {
# 46 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
    typedef enum {
        JSMN_UNDEFINED = 0,
        JSMN_OBJECT = 1,
        JSMN_ARRAY = 2,
        JSMN_STRING = 3,
        JSMN_PRIMITIVE = 4
    } jsmntype_t;

    enum jsmnerr {

        JSMN_ERROR_NOMEM = -1,

        JSMN_ERROR_INVAL = -2,

        JSMN_ERROR_PART = -3
    };







    typedef struct {
        jsmntype_t type;
        int start;
        int end;
        int size;



    } jsmntok_t;





    typedef struct {
        unsigned int pos;
        unsigned int toknext;
        int toksuper;
    } jsmn_parser;




    extern void jsmn_init(jsmn_parser *parser);






    extern int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                            jsmntok_t *tokens, const unsigned int num_tokens);


}
# 3 "/home/amos/prog/c/amos_libraries/preprocessor/test/PreprocTest.cpp" 2




# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 1
# 26 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h"
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 36 "/usr/include/c++/7/stdlib.h" 3
# 1 "/usr/include/c++/7/cstdlib" 1 3
# 39 "/usr/include/c++/7/cstdlib" 3
       
# 40 "/usr/include/c++/7/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 1 3
# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3

# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 251 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 533 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/os_defines.h" 1 3
# 534 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/cpu_defines.h" 1 3
# 537 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 2 3
# 42 "/usr/include/c++/7/cstdlib" 2 3
# 75 "/usr/include/c++/7/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 128 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 178 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4







struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 198 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

extern unsigned int gnu_dev_major (__dev_t __dev) throw () __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) throw () __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw () __attribute__ ((__const__));
# 85 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
}
# 206 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 246 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 145 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 255 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 607 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1016 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1017 "/usr/include/stdlib.h" 2 3 4
# 1026 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/7/cstdlib" 2 3

# 1 "/usr/include/c++/7/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/7/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/7/bits/std_abs.h" 3
# 46 "/usr/include/c++/7/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
# 106 "/usr/include/c++/7/bits/std_abs.h" 3

}
}
# 78 "/usr/include/c++/7/cstdlib" 2 3
# 121 "/usr/include/c++/7/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;

  using ::aligned_alloc;

  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/7/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/7/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/7/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 27 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h" 1
# 13 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h"
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_common.h" 1
# 14 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h" 2


# 15 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h"
struct memory_arena
{
 void *Start;
 size_t Size;
 size_t Used;
};

struct temporary_memory
{
 memory_arena* Arena;
 size_t Used;
};

void *abm_AllocateOsMemory(void *Address, size_t Size);
void abm_DeallocateOsMemory(void *Address, size_t Size);




void *abm_PushSize_(memory_arena *Memory, size_t Size, b8 ClearMemory = true);
memory_arena abm_InitMemory(void *Start, size_t Size);
void abm_ResetMemory(memory_arena *Memory);
inline size_t abm_GetMemoryLeft(memory_arena *Memory);

temporary_memory abm_BeginTemporaryMemory(memory_arena *Memory);
void abm_EndTemporaryMemory(temporary_memory TempMem);






# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h" 1
# 10 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/mman.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman.h" 1 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 1 3 4
# 115 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 3 4

# 42 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 3 4
extern "C" {



int memfd_create (const char *__name, unsigned int __flags) throw ();



int mlock2 (const void *__addr, size_t __length, unsigned int __flags) throw ();





int pkey_alloc (unsigned int __flags, unsigned int __access_rights) throw ();



int pkey_set (int __key, unsigned int __access_rights) throw ();



int pkey_get (int __key) throw ();



int pkey_free (int __key) throw ();



int pkey_mprotect (void *__addr, size_t __len, int __prot, int __pkey) throw ();

}
# 115 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4




extern "C" {
# 57 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap (void *__addr, size_t __len, int __prot,
     int __flags, int __fd, __off_t __offset) throw ();
# 70 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap64 (void *__addr, size_t __len, int __prot,
       int __flags, int __fd, __off64_t __offset) throw ();




extern int munmap (void *__addr, size_t __len) throw ();




extern int mprotect (void *__addr, size_t __len, int __prot) throw ();







extern int msync (void *__addr, size_t __len, int __flags);




extern int madvise (void *__addr, size_t __len, int __advice) throw ();



extern int posix_madvise (void *__addr, size_t __len, int __advice) throw ();




extern int mlock (const void *__addr, size_t __len) throw ();


extern int munlock (const void *__addr, size_t __len) throw ();




extern int mlockall (int __flags) throw ();



extern int munlockall (void) throw ();







extern int mincore (void *__start, size_t __len, unsigned char *__vec)
     throw ();
# 133 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
       int __flags, ...) throw ();



extern int remap_file_pages (void *__start, size_t __size, int __prot,
        size_t __pgoff, int __flags) throw ();




extern int shm_open (const char *__name, int __oflag, mode_t __mode);


extern int shm_unlink (const char *__name);

}
# 11 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h" 2

# 11 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h"
void *abm_AllocateOsMemory(void *Address, size_t Size)
{
    void* MemoryStart = mmap(Address, Size,
                             
# 14 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h" 3 4
                            0x1 
# 14 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h"
                                      | 
# 14 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h" 3 4
                                        0x2
# 14 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h"
                                                  ,
                             
# 15 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h" 3 4
                            0x20 
# 15 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h"
                                          | 
# 15 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h" 3 4
                                            0x02
# 15 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h"
                                                       ,
                             -1, 0);

    return MemoryStart;

}

void
abm_DeallocateOsMemory(void *Address, size_t Size)
{
    munmap(Address, Size);
}
# 48 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h" 2





memory_arena
abm_InitMemory(void *Start, size_t Size)
{
    memory_arena Memory = {};
    Memory.Start = Start;
    Memory.Size = Size;
    Memory.Used = 0;

    return Memory;
}

memory_arena
abm_CreateSubArena(memory_arena *Memory, size_t Size)
{
    memory_arena SubArena = {};
    SubArena.Start = abm_PushSize_(Memory, Size);
    SubArena.Size = Size;
    SubArena.Used = 0;

    return SubArena;
}

void *
abm_PushSize_(memory_arena *Memory, size_t Size, b8 ClearMemory)
{
    void* Result = 0;

    ;
    Result = (((u8*)Memory->Start) + Memory->Used);
    Memory->Used += Size;

    if(ClearMemory)
    {
        for(size_t Index = 0; Index < Size; ++Index)
        {
            ((u8*)Result)[Index] = 0;
        }
    }

    return Result;
}

temporary_memory
abm_BeginTemporaryMemory(memory_arena *Memory)
{
    temporary_memory Result = {};
    Result.Arena = Memory;
    Result.Used = Memory->Used;

    return Result;
}

void
abm_EndTemporaryMemory(temporary_memory TempMem)
{
    TempMem.Arena->Used = TempMem.Used;
}


void
abm_ResetMemory(memory_arena *Memory)
{
    Memory->Used = 0;
}

inline size_t
abm_GetMemoryLeft(memory_arena *Memory)
{
    size_t Result = Memory->Size - Memory->Used;

    return Result;
}
# 28 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_string.h" 1



# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h" 1
# 47 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h"
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h" 1
# 48 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h" 2
# 5 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_string.h" 2

u32 abs_StringLength(char const *x, u32 MaxLength);


struct abs_stringptr
{
    char const* String;
    u32 Length;

    abs_stringptr(void) = default;
    constexpr abs_stringptr(char const *S, u32 L) : String{S}, Length{L} {}
    constexpr abs_stringptr(char const *S, s32 L) : String{S}, Length{(u32)L} {}
    abs_stringptr(char const* x) {this->String = x; this->Length = abs_StringLength(x, 1024);}
    abs_stringptr(char * const x) {this->String = x; this->Length = abs_StringLength(x, 1024);}
    abs_stringptr(const char &x) {}
    operator char const *() const { return this->String;}
};


b8
abs_AreStringFragmentsEqual(char const *String1, char const *String2, u32 MaxLength, b8 isCaseInsensitive);

b8
abs_AreStringsEqual(const char *String1, u32 String1Len, const char *String2, u32 String2Len, b8 isCaseInsensitive);

u32
abs_FindInList(abs_stringptr String, u32 ListCount, const abs_stringptr *List, b8 isCaseInsensitive = false);

u32
abs_FindInList(const char *SearchString, u32 ListCount, const abs_stringptr *List, b8 isCaseInsensitive = false);

char *abs_StringCopy( char * dest, const char * src, size_t count );

abs_stringptr
abs_CreateStringPtr(memory_arena *Memory, const char *String);




# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4


# 28 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 88 "/usr/include/string.h" 3 4
}
# 98 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 121 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 203 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 223 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 250 "/usr/include/string.h" 3 4
}
# 260 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 300 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 327 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 368 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 420 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 66 "/usr/include/strings.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "/usr/include/strings.h" 3 4
}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 498 "/usr/include/string.h" 3 4
}
# 45 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_string.h" 2


# 46 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_string.h"
b8
abs_AreStringFragmentsEqual(char const *String1, char const *String2, u32 MaxLength, b8 isCaseInsensitive)
{
    b8 isMatch = false;
    const char *CompAt = String1;
    const char *SearchAt = String2;
    u32 StringLength = 0;

    while(*CompAt && *SearchAt &&
          StringLength < MaxLength)
    {
        char CompAtChar = *CompAt;
        char SearchAtChar = *SearchAt;
        if(isCaseInsensitive)
        {
            if(CompAtChar >= 'a' &&
               CompAtChar <= 'z')
            {
                CompAtChar -= 32;
            }
            if(SearchAtChar >= 'a' &&
               SearchAtChar <= 'z')
            {
                SearchAtChar -= 32;
            }
        }
        if(CompAtChar == SearchAtChar)
        {
            isMatch = true;
            ++CompAt;
            ++SearchAt;
        }
        else
        {
            isMatch = false;
            break;
        }

        ++StringLength;
    }

    return (isMatch && (StringLength == MaxLength));

}

b8
abs_AreStringsEqual(char const *String1, u32 String1Len, char const *String2, u32 String2Len, b8 isCaseInsensitive)
{
    b8 isMatch = false;
    if(String1Len == String2Len)
    {
        isMatch = abs_AreStringFragmentsEqual(String1, String2, String1Len, isCaseInsensitive);

    }

    return isMatch;
}

b8
abs_AreStringsEqual(char const *String1, u32 String1Len, char const *String2, u32 String2Len)
{
    return abs_AreStringsEqual(String1, String1Len, String2, String2Len, true);
}

b8
abs_AreStringsEqual(abs_stringptr String1, abs_stringptr String2, b8 isCaseInsensitive)
{
    return abs_AreStringsEqual(String1.String, String1.Length, String2.String, String2.Length, isCaseInsensitive);
}

b8
abs_AreStringsEqual(abs_stringptr String1, abs_stringptr String2)
{
    return abs_AreStringsEqual(String1.String, String1.Length, String2.String, String2.Length, false);
}

b8
abs_AreStringsEqual(char const *String, u32 StringLen, abs_stringptr StringPtr)
{
    return abs_AreStringsEqual(String, StringLen, StringPtr.String, StringPtr.Length, true);
}

u32
abs_StringLength(char const *x, u32 MaxLength)
{
    char const *At = x;
    u32 Length = 0;
    while(Length < MaxLength)
    {
        if(*At++) {++Length;}
        else {break;}
    }

    return Length;
}

u32
abs_FindInList(abs_stringptr String, u32 ListCount, const abs_stringptr *List, b8 isCaseInsensitive)
{
    u32 MatchIndex = ListCount;

    for(u32 Index = 0;
        Index < ListCount;
        ++Index)
    {
        if(abs_AreStringsEqual(String.String, String.Length, List[Index].String, List[Index].Length, isCaseInsensitive))
        {
            MatchIndex = Index;
            break;
        }
    }

    return MatchIndex;
}

u32
abs_FindInList(const char *SearchString, u32 ListCount, const abs_stringptr *List, b8 isCaseInsensitive)
{
    u32 MatchIndex = ListCount;
    u32 SearchStringLen = (u32)strlen(SearchString);

    for(u32 Index = 0;
        Index < ListCount;
        ++Index)
    {
        if(abs_AreStringsEqual(SearchString, SearchStringLen, List[Index], (u32)strlen(List[Index]), isCaseInsensitive))
        {
            MatchIndex = Index;
            break;
        }
    }

    return MatchIndex;
}

char *abs_StringCopy(char * dest, const char *src, size_t count)
{
    return strncpy(dest, src, count);
}

abs_stringptr
abs_CreateStringPtr(memory_arena *Memory, const char *String)
{
    u32 Length = abs_StringLength(String, (abm_GetMemoryLeft(Memory)-1));
    char *StringPtr = (char*)abm_PushSize_(Memory, (Length+1)*sizeof(char));

    abs_StringCopy(StringPtr, String, Length+1);
    abs_stringptr Result = abs_stringptr(StringPtr, Length);

    return Result;
}

abs_stringptr
abs_Capitalize(abs_stringptr String, memory_arena *Memory)
{
    char *NewString = (char*)abm_PushSize_(Memory, (String.Length)*sizeof(char));
    for(u32 i = 0; i < String.Length; ++i)
    {
        if(String.String[i] >= 'a' && String.String[i] <= 'z')
        {
            NewString[i] = String.String[i] - 0x20;
        }
        else
        {
            NewString[i] = String.String[i];
        }
    }
    abs_stringptr Result = {NewString, String.Length};

    return Result;

}

abs_stringptr
abs_Lowercase(abs_stringptr String, memory_arena *Memory)
{
    char *NewString = (char*)abm_PushSize_(Memory, (String.Length)*sizeof(char));
    for(u32 i = 0; i < String.Length; ++i)
    {
        if(String.String[i] >= 'A' && String.String[i] <= 'Z')
        {
            NewString[i] = String.String[i] + 0x20;
        }
        else
        {
            NewString[i] = String.String[i];
        }
    }
    abs_stringptr Result = {NewString, String.Length};

    return Result;

}
# 29 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 1
# 179 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 99 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4

# 99 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 180 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 181 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 2





# 185 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
typedef char *STBSP_SPRINTFCB(const char *buf, void *user, int len);





extern "C" int stbsp_vsprintf(char *buf, char const *fmt, va_list va);
extern "C" int stbsp_vsnprintf(char *buf, int count, char const *fmt, va_list va);
extern "C" int stbsp_sprintf(char *buf, char const *fmt, ...);
extern "C" int stbsp_snprintf(char *buf, int count, char const *fmt, ...);

extern "C" int stbsp_vsprintfcb(STBSP_SPRINTFCB *callback, void *user, char *buf, char const *fmt, va_list va);
extern "C" void stbsp_set_separators(char comma, char period);
# 30 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2

# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 1
# 32 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2






enum json_flags
{
    JSON_Null = 0,
    JSON_IsLastInList = 1 << 0,
    JSON_DontUseTag = 1 << 1,
    JSON_BaseObject = 1 << 2,
};


template<typename T>
auto StringToEnum(const char *String) -> T;

template<typename T>
auto StringToEnum(abs_stringptr String) -> T;

u32 StartGroup(char *, u32 MaxLength);
u32 EndGroup(char *, u32 MaxLength, b8 isLast);

s32 ParseJson(memory_arena *VolatileMemory, char const *Json, size_t JsonLength, jsmntok_t **TokenArray);
# 65 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h"
enum class test_cmd;
const u32 test_cmd_Count = 6;
template<>
auto StringToEnum<test_cmd>(const char *String) -> test_cmd;
template<>
auto StringToEnum<test_cmd>(abs_stringptr String) -> test_cmd;
constexpr abs_stringptr EnumToString(test_cmd EnumToken);
constexpr char const* EnumToCString(test_cmd EnumToken);
constexpr abs_stringptr test_cmd_Strings[test_cmd_Count] =
{
   {"NOP", 3},
   {"Command1", 8},
   {"Command2", 8},
   {"Command3", 8},
   {"Command4", 8},
   {"Last", 4},
};



enum class Colours;
const u32 Colours_Count = 3;
jsmntok_t *JsonToObject(memory_arena *VolatileMemory, char const *Json, size_t JsonLength, jsmntok_t *TokenArray, Colours *ObjectOut, u32 Unused);
u32
PushJson(char *Json, u32 MaxLength, char const *Tag, Colours Type, u32 JsonFlags);
template<>
auto StringToEnum<Colours>(const char *String) -> Colours;
template<>
auto StringToEnum<Colours>(abs_stringptr String) -> Colours;
constexpr abs_stringptr EnumToString(Colours EnumToken);
constexpr char const* EnumToCString(Colours EnumToken);
constexpr abs_stringptr Colours_Strings[Colours_Count] =
{
   {"Red", 3},
   {"Green", 5},
   {"Blue", 4},
};

const char *EnumToLabel_Object(Colours EnumToken);

const char * Colours_LabelObject[Colours_Count] =
{
    "Apple",
    "Brocoli",
    "Blueberry",
};



struct test_type;
enum class test_cmd;


struct test_cmd_queue
{
    test_cmd Items[10];
    s32 Front;
    s32 Rear;
};

inline void InitializeQueue(test_cmd_queue *Queue);
inline b8 isQueueEmpty(test_cmd_queue *Queue);
inline b8 isQueueFull(test_cmd_queue *Queue);
b8 EnqueueCommand(test_cmd_queue *Queue, test_cmd Cmd);
test_cmd DequeueCommand(test_cmd_queue *Queue);



typedef void test_statemachine(test_type *State, test_cmd Cmd, int Int, char const *String);

inline b8 GoToState(test_type *State, test_statemachine *NewState);
char const *GetStateName(test_statemachine *StateName);
b8 EnqueueCommand(test_type *State, test_cmd Cmd);
test_cmd DequeueCommand(test_type *State);

void Idle(test_type *State, test_cmd Cmd, int Int, char const *String);
void Running(test_type *State, test_cmd Cmd, int Int, char const *String);




struct my_json_test;
u32 PushJson(char *Json, u32 MaxLength, char const *Tag, const my_json_test &Value, u32 JsonFlags);
struct my_json_test_existlist;
jsmntok_t *JsonToObject(memory_arena *VolatileMemory, char const *Json, size_t JsonLength, jsmntok_t *TokenArray, my_json_test *ObjectOut, my_json_test_existlist *ItemsExistOut);
u32
JsonArrayToObjectArray(memory_arena *VolatileMemory, char const *Json, size_t JsonLength, my_json_test **ObjectArray, my_json_test_existlist **ObjectArrayExist);
struct my_json_test_existlist
{
   b8 TestUnsigned;
   b8 TestString;
   b8 MyColour;
   b8 isValue;
};
# 8 "/home/amos/prog/c/amos_libraries/preprocessor/test/PreprocTest.cpp" 2

# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4


# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/libio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4






typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 36 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 149 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 337 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 433 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 462 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 524 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
}
# 42 "/usr/include/stdio.h" 2 3 4
# 78 "/usr/include/stdio.h" 3 4
typedef _G_fpos_t fpos_t;




typedef _G_fpos64_t fpos64_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();







extern FILE *tmpfile (void) ;
# 169 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 223 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 256 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 868 "/usr/include/stdio.h" 3 4
}
# 10 "/home/amos/prog/c/amos_libraries/preprocessor/test/PreprocTest.cpp" 2


# 11 "/home/amos/prog/c/amos_libraries/preprocessor/test/PreprocTest.cpp"
                                                                                ;

struct test_type
{
    test_statemachine *CurrentState;
    b8 isNewState;
    test_cmd_queue CommandQueue;
};


enum class test_cmd
{
    NOP,
    Command1,
    Command2,
    Command3,
    Command4,
    Last
};

;
enum class Colours
{
   
        Red,

   
        Green,

   
        Blue
};


struct my_json_test
{
    u8 TestUnsigned;
    char TestString[50];
    Colours MyColour;
    b8 isValue;
};


# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 1
# 26 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h"
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 27 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h" 1
# 47 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h"
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory_linux.h" 1
# 48 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_memory.h" 2
# 28 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/ab_string.h" 1
# 29 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 1
# 30 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2

# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 1
# 32 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2
# 169 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h"
# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 1
# 203 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 204 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 2
# 239 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
static signed int stbsp__real_to_str(char const **start, unsigned int *len, char *out, signed int *decimal_pos, double value, unsigned int frac_digits);
static signed int stbsp__real_to_parts(signed long long *bits, signed int *expo, double value);



static char stbsp__period = '.';
static char stbsp__comma = ',';
static struct
{
    short temp;
    char pair[201];
} stbsp__digitpair =
{
    0,
    "00010203040506070809101112131415161718192021222324"
        "25262728293031323334353637383940414243444546474849"
        "50515253545556575859606162636465666768697071727374"
        "75767778798081828384858687888990919293949596979899"
};

extern "C" void stbsp_set_separators(char pcomma, char pperiod)
{
    stbsp__period = pperiod;
    stbsp__comma = pcomma;
}
# 279 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
static void stbsp__lead_sign(unsigned int fl, char *sign)
{
    sign[0] = 0;
    if (fl & 128) {
        sign[0] = 1;
        sign[1] = '-';
    } else if (fl & 4) {
        sign[0] = 1;
        sign[1] = ' ';
    } else if (fl & 2) {
        sign[0] = 1;
        sign[1] = '+';
    }
}

extern "C" int stbsp_vsprintfcb(STBSP_SPRINTFCB *callback, void *user, char *buf, char const *fmt, va_list va)
{
    static char hex[] = "0123456789abcdefxp";
    static char hexu[] = "0123456789ABCDEFXP";
    char *bf;
    char const *f;
    int tlen = 0;

    bf = buf;
    f = fmt;
    for (;;) {
        signed int fw, pr, tz;
        unsigned int fl;
# 337 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
        for (;;) {
            while (((unsigned long long)f) & 3) {
                schk1:
                if (f[0] == '%')
                    goto scandd;
                schk2:
                if (f[0] == 0)
                    goto endfmt;
                { if (callback) { { int len = (int)(bf - buf); if ((len + (1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; } };
                *bf++ = f[0];
                ++f;
            }
            for (;;) {



                unsigned int v, c;
                v = *(unsigned int *)f;
                c = (~v) & 0x80808080;
                if (((v ^ 0x25252525) - 0x01010101) & c)
                    goto schk1;
                if ((v - 0x01010101) & c)
                    goto schk2;
                if (callback)
                    if ((512 - (int)(bf - buf)) < 4)
                    goto schk1;
# 371 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                {
                    *(unsigned int *)bf = v;
                }
                bf += 4;
                f += 4;
            }
        }
        scandd:

        ++f;


        fw = 0;
        pr = -1;
        fl = 0;
        tz = 0;


        for (;;) {
            switch (f[0]) {

                case '-':
                fl |= 1;
                ++f;
                continue;

                case '+':
                fl |= 2;
                ++f;
                continue;

                case ' ':
                fl |= 4;
                ++f;
                continue;

                case '#':
                fl |= 8;
                ++f;
                continue;

                case '\'':
                fl |= 64;
                ++f;
                continue;

                case '$':
                if (fl & 256) {
                    if (fl & 2048) {
                        fl |= 4096;
                    } else {
                        fl |= 2048;
                    }
                } else {
                    fl |= 256;
                }
                ++f;
                continue;

                case '_':
                fl |= 1024;
                ++f;
                continue;

                case '0':
                fl |= 16;
                ++f;
                goto flags_done;
                default: goto flags_done;
            }
        }
        flags_done:


        if (f[0] == '*') {
            fw = 
# 446 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                __builtin_va_arg(
# 446 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                va
# 446 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                ,
# 446 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                unsigned int
# 446 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                )
# 446 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                         ;
            ++f;
        } else {
            while ((f[0] >= '0') && (f[0] <= '9')) {
                fw = fw * 10 + f[0] - '0';
                f++;
            }
        }

        if (f[0] == '.') {
            ++f;
            if (f[0] == '*') {
                pr = 
# 458 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                    __builtin_va_arg(
# 458 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                    va
# 458 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                    ,
# 458 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                    unsigned int
# 458 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                    )
# 458 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                             ;
                ++f;
            } else {
                pr = 0;
                while ((f[0] >= '0') && (f[0] <= '9')) {
                    pr = pr * 10 + f[0] - '0';
                    f++;
                }
            }
        }


        switch (f[0]) {

            case 'h':
            fl |= 512;
            ++f;
            if (f[0] == 'h')
                ++f;
            break;

            case 'l':
            fl |= ((sizeof(long) == 8) ? 32 : 0);
            ++f;
            if (f[0] == 'l') {
                fl |= 32;
                ++f;
            }
            break;

            case 'j':
            fl |= (sizeof(size_t) == 8) ? 32 : 0;
            ++f;
            break;

            case 'z':
            fl |= (sizeof(ptrdiff_t) == 8) ? 32 : 0;
            ++f;
            break;
            case 't':
            fl |= (sizeof(ptrdiff_t) == 8) ? 32 : 0;
            ++f;
            break;

            case 'I':
            if ((f[1] == '6') && (f[2] == '4')) {
                fl |= 32;
                f += 3;
            } else if ((f[1] == '3') && (f[2] == '2')) {
                f += 3;
            } else {
                fl |= ((sizeof(void *) == 8) ? 32 : 0);
                ++f;
            }
            break;
            default: break;
        }


        switch (f[0]) {

            char num[512];
            char lead[8];
            char tail[8];
            char *s;
            char const *h;
            unsigned int l, n, cs;
            unsigned long long n64;

            double fv;

            signed int dp;
            char const *sn;

            case 's':

            s = 
# 534 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
               __builtin_va_arg(
# 534 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
               va
# 534 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
               ,
# 534 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
               char *
# 534 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
               )
# 534 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                 ;
            if (s == 0)
                s = (char *)"null";

            sn = s;
            for (;;) {
                if ((((unsigned long long)sn) & 3) == 0)
                    break;
                lchk:
                if (sn[0] == 0)
                    goto ld;
                ++sn;
            }
            n = 0xffffffff;
            if (pr >= 0) {
                n = (unsigned int)(sn - s);
                if (n >= (unsigned int)pr)
                    goto ld;
                n = ((unsigned int)(pr - n)) >> 2;
            }
            while (n) {
                unsigned int v = *(unsigned int *)sn;
                if ((v - 0x01010101) & (~v) & 0x80808080UL)
                    goto lchk;
                sn += 4;
                --n;
            }
            goto lchk;
            ld:

            l = (unsigned int)(sn - s);

            if (l > (unsigned int)pr)
                l = pr;
            lead[0] = 0;
            tail[0] = 0;
            pr = 0;
            dp = 0;
            cs = 0;

            goto scopy;

            case 'c':

            s = num + 512 - 1;
            *s = (char)
# 579 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                      __builtin_va_arg(
# 579 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                      va
# 579 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                      ,
# 579 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                      int
# 579 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                      )
# 579 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                     ;
            l = 1;
            lead[0] = 0;
            tail[0] = 0;
            pr = 0;
            dp = 0;
            cs = 0;
            goto scopy;

            case 'n':
            {
                int *d = 
# 590 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                        __builtin_va_arg(
# 590 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                        va
# 590 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                        ,
# 590 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                        int *
# 590 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                        )
# 590 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                         ;
                *d = tlen + (int)(bf - buf);
            } break;
# 612 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
            case 'A':
            case 'a':
            h = (f[0] == 'A') ? hexu : hex;
            fv = 
# 615 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                __builtin_va_arg(
# 615 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                va
# 615 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                ,
# 615 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                double
# 615 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                )
# 615 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                  ;
            if (pr == -1)
                pr = 6;

            if (stbsp__real_to_parts((signed long long *)&n64, &dp, fv))
                fl |= 128;

            s = num + 64;

            stbsp__lead_sign(fl, lead);

            if (dp == -1023)
                dp = (n64) ? -1022 : 0;
            else
                n64 |= (((unsigned long long)1) << 52);
            n64 <<= (64 - 56);
            if (pr < 15)
                n64 += ((((unsigned long long)8) << 56) >> (pr * 4));






            lead[1 + lead[0]] = '0';
            lead[2 + lead[0]] = 'x';
            lead[0] += 2;

            *s++ = h[(n64 >> 60) & 15];
            n64 <<= 4;
            if (pr)
                *s++ = stbsp__period;
            sn = s;


            n = pr;
            if (n > 13)
                n = 13;
            if (pr > (signed int)n)
                tz = pr - n;
            pr = 0;
            while (n--) {
                *s++ = h[(n64 >> 60) & 15];
                n64 <<= 4;
            }


            tail[1] = h[17];
            if (dp < 0) {
                tail[2] = '-';
                dp = -dp;
            } else
                tail[2] = '+';
            n = (dp >= 1000) ? 6 : ((dp >= 100) ? 5 : ((dp >= 10) ? 4 : 3));
            tail[0] = (char)n;
            for (;;) {
                tail[n] = '0' + dp % 10;
                if (n <= 3)
                    break;
                --n;
                dp /= 10;
            }

            dp = (int)(s - sn);
            l = (int)(s - (num + 64));
            s = num + 64;
            cs = 1 + (3 << 24);
            goto scopy;

            case 'G':
            case 'g':
            h = (f[0] == 'G') ? hexu : hex;
            fv = 
# 687 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                __builtin_va_arg(
# 687 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                va
# 687 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                ,
# 687 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                double
# 687 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                )
# 687 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                  ;
            if (pr == -1)
                pr = 6;
            else if (pr == 0)
                pr = 1;

            if (stbsp__real_to_str(&sn, &l, num, &dp, fv, (pr - 1) | 0x80000000))
                fl |= 128;


            n = pr;
            if (l > (unsigned int)pr)
                l = pr;
            while ((l > 1) && (pr) && (sn[l - 1] == '0')) {
                --pr;
                --l;
            }


            if ((dp <= -4) || (dp > (signed int)n)) {
                if (pr > (signed int)l)
                    pr = l - 1;
                else if (pr)
                    --pr;
                goto doexpfromg;
            }

            if (dp > 0) {
                pr = (dp < (signed int)l) ? l - dp : 0;
            } else {
                pr = -dp + ((pr > (signed int)l) ? (signed int) l : pr);
            }
            goto dofloatfromg;

            case 'E':
            case 'e':
            h = (f[0] == 'E') ? hexu : hex;
            fv = 
# 724 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                __builtin_va_arg(
# 724 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                va
# 724 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                ,
# 724 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                double
# 724 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                )
# 724 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                  ;
            if (pr == -1)
                pr = 6;

            if (stbsp__real_to_str(&sn, &l, num, &dp, fv, pr | 0x80000000))
                fl |= 128;
            doexpfromg:
            tail[0] = 0;
            stbsp__lead_sign(fl, lead);
            if (dp == 0x7000) {
                s = (char *)sn;
                cs = 0;
                pr = 0;
                goto scopy;
            }
            s = num + 64;

            *s++ = sn[0];

            if (pr)
                *s++ = stbsp__period;


            if ((l - 1) > (unsigned int)pr)
                l = pr + 1;
            for (n = 1; n < l; n++)
                *s++ = sn[n];

            tz = pr - (l - 1);
            pr = 0;

            tail[1] = h[0xe];
            dp -= 1;
            if (dp < 0) {
                tail[2] = '-';
                dp = -dp;
            } else
                tail[2] = '+';



            n = (dp >= 100) ? 5 : 4;

            tail[0] = (char)n;
            for (;;) {
                tail[n] = '0' + dp % 10;
                if (n <= 3)
                    break;
                --n;
                dp /= 10;
            }
            cs = 1 + (3 << 24);
            goto flt_lead;

            case 'f':
            fv = 
# 779 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                __builtin_va_arg(
# 779 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                va
# 779 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                ,
# 779 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                double
# 779 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                )
# 779 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                  ;
            doafloat:

            if (fl & 256) {
                double divisor;
                divisor = 1000.0f;
                if (fl & 2048)
                    divisor = 1024.0;
                while (fl < 0x4000000) {
                    if ((fv < divisor) && (fv > -divisor))
                        break;
                    fv /= divisor;
                    fl += 0x1000000;
                }
            }
            if (pr == -1)
                pr = 6;

            if (stbsp__real_to_str(&sn, &l, num, &dp, fv, pr))
                fl |= 128;
            dofloatfromg:
            tail[0] = 0;
            stbsp__lead_sign(fl, lead);
            if (dp == 0x7000) {
                s = (char *)sn;
                cs = 0;
                pr = 0;
                goto scopy;
            }
            s = num + 64;


            if (dp <= 0) {
                signed int i;

                *s++ = '0';
                if (pr)
                    *s++ = stbsp__period;
                n = -dp;
                if ((signed int)n > pr)
                    n = pr;
                i = n;
                while (i) {
                    if ((((unsigned long long)s) & 3) == 0)
                        break;
                    *s++ = '0';
                    --i;
                }
                while (i >= 4) {
                    *(unsigned int *)s = 0x30303030;
                    s += 4;
                    i -= 4;
                }
                while (i) {
                    *s++ = '0';
                    --i;
                }
                if ((signed int)(l + n) > pr)
                    l = pr - n;
                i = l;
                while (i) {
                    *s++ = *sn++;
                    --i;
                }
                tz = pr - (n + l);
                cs = 1 + (3 << 24);
            } else {
                cs = (fl & 64) ? ((600 - (unsigned int)dp) % 3) : 0;
                if ((unsigned int)dp >= l) {

                    n = 0;
                    for (;;) {
                        if ((fl & 64) && (++cs == 4)) {
                            cs = 0;
                            *s++ = stbsp__comma;
                        } else {
                            *s++ = sn[n];
                            ++n;
                            if (n >= l)
                                break;
                        }
                    }
                    if (n < (unsigned int)dp) {
                        n = dp - n;
                        if ((fl & 64) == 0) {
                            while (n) {
                                if ((((unsigned long long)s) & 3) == 0)
                                    break;
                                *s++ = '0';
                                --n;
                            }
                            while (n >= 4) {
                                *(unsigned int *)s = 0x30303030;
                                s += 4;
                                n -= 4;
                            }
                        }
                        while (n) {
                            if ((fl & 64) && (++cs == 4)) {
                                cs = 0;
                                *s++ = stbsp__comma;
                            } else {
                                *s++ = '0';
                                --n;
                            }
                        }
                    }
                    cs = (int)(s - (num + 64)) + (3 << 24);
                    if (pr) {
                        *s++ = stbsp__period;
                        tz = pr;
                    }
                } else {

                    n = 0;
                    for (;;) {
                        if ((fl & 64) && (++cs == 4)) {
                            cs = 0;
                            *s++ = stbsp__comma;
                        } else {
                            *s++ = sn[n];
                            ++n;
                            if (n >= (unsigned int)dp)
                                break;
                        }
                    }
                    cs = (int)(s - (num + 64)) + (3 << 24);
                    if (pr)
                        *s++ = stbsp__period;
                    if ((l - dp) > (unsigned int)pr)
                        l = pr + dp;
                    while (n < l) {
                        *s++ = sn[n];
                        ++n;
                    }
                    tz = pr - (l - dp);
                }
            }
            pr = 0;


            if (fl & 256) {
                char idx;
                idx = 1;
                if (fl & 1024)
                    idx = 0;
                tail[0] = idx;
                tail[1] = ' ';
                {
                    if (fl >> 24) {
                        if (fl & 2048)
                            tail[idx + 1] = "_KMGT"[fl >> 24];
                        else
                            tail[idx + 1] = "_kMGT"[fl >> 24];
                        idx++;

                        if (fl & 2048 && !(fl & 4096)) {
                            tail[idx + 1] = 'i';
                            idx++;
                        }
                        tail[0] = idx;
                    }
                }
            };

            flt_lead:

            l = (unsigned int)(s - (num + 64));
            s = num + 64;
            goto scopy;


            case 'B':
            case 'b':
            h = (f[0] == 'B') ? hexu : hex;
            lead[0] = 0;
            if (fl & 8) {
                lead[0] = 2;
                lead[1] = '0';
                lead[2] = h[0xb];
            }
            l = (8 << 4) | (1 << 8);
            goto radixnum;

            case 'o':
            h = hexu;
            lead[0] = 0;
            if (fl & 8) {
                lead[0] = 1;
                lead[1] = '0';
            }
            l = (3 << 4) | (3 << 8);
            goto radixnum;

            case 'p':
            fl |= (sizeof(void *) == 8) ? 32 : 0;
            pr = sizeof(void *) * 2;
            fl &= ~16;


            case 'X':
            case 'x':
            h = (f[0] == 'X') ? hexu : hex;
            l = (4 << 4) | (4 << 8);
            lead[0] = 0;
            if (fl & 8) {
                lead[0] = 2;
                lead[1] = '0';
                lead[2] = h[16];
            }
            radixnum:

            if (fl & 32)
                n64 = 
# 992 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                     __builtin_va_arg(
# 992 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                     va
# 992 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                     ,
# 992 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                     unsigned long long
# 992 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                     )
# 992 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                              ;
            else
                n64 = 
# 994 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                     __builtin_va_arg(
# 994 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                     va
# 994 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                     ,
# 994 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                     unsigned int
# 994 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                     )
# 994 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                              ;

            s = num + 512;
            dp = 0;

            tail[0] = 0;
            if (n64 == 0) {
                lead[0] = 0;
                if (pr == 0) {
                    l = 0;
                    cs = (((l >> 4) & 15)) << 24;
                    goto scopy;
                }
            }

            for (;;) {
                *--s = h[n64 & ((1 << (l >> 8)) - 1)];
                n64 >>= (l >> 8);
                if (!((n64) || ((signed int)((num + 512) - s) < pr)))
                    break;
                if (fl & 64) {
                    ++l;
                    if ((l & 15) == ((l >> 4) & 15)) {
                        l &= ~15;
                        *--s = stbsp__comma;
                    }
                }
            };

            cs = (unsigned int)((num + 512) - s) + ((((l >> 4) & 15)) << 24);

            l = (unsigned int)((num + 512) - s);

            goto scopy;

            case 'u':
            case 'i':
            case 'd':

            if (fl & 32) {
                signed long long i64 = 
# 1034 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                                  __builtin_va_arg(
# 1034 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                  va
# 1034 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                                  ,
# 1034 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                  signed long long
# 1034 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                                  )
# 1034 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                                          ;
                n64 = (unsigned long long)i64;
                if ((f[0] != 'u') && (i64 < 0)) {
                    n64 = (unsigned long long)-i64;
                    fl |= 128;
                }
            } else {
                signed int i = 
# 1041 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                                __builtin_va_arg(
# 1041 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                va
# 1041 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                                ,
# 1041 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                signed int
# 1041 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
                                )
# 1041 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                                                        ;
                n64 = (unsigned int)i;
                if ((f[0] != 'u') && (i < 0)) {
                    n64 = (unsigned int)-i;
                    fl |= 128;
                }
            }


            if (fl & 256) {
                if (n64 < 1024)
                    pr = 0;
                else if (pr == -1)
                    pr = 1;
                fv = (double)(signed long long)n64;
                goto doafloat;
            }



            s = num + 512;
            l = 0;

            for (;;) {

                char *o = s - 8;
                if (n64 >= 100000000) {
                    n = (unsigned int)(n64 % 100000000);
                    n64 /= 100000000;
                } else {
                    n = (unsigned int)n64;
                    n64 = 0;
                }
                if ((fl & 64) == 0) {
                    do {
                        s -= 2;
                        *(unsigned short *)s = *(unsigned short *)&stbsp__digitpair.pair[(n % 100) * 2];
                        n /= 100;
                    } while (n);
                }
                while (n) {
                    if ((fl & 64) && (l++ == 3)) {
                        l = 0;
                        *--s = stbsp__comma;
                        --o;
                    } else {
                        *--s = (char)(n % 10) + '0';
                        n /= 10;
                    }
                }
                if (n64 == 0) {
                    if ((s[0] == '0') && (s != (num + 512)))
                        ++s;
                    break;
                }
                while (s != o)
                    if ((fl & 64) && (l++ == 3)) {
                    l = 0;
                    *--s = stbsp__comma;
                    --o;
                } else {
                    *--s = '0';
                }
            }

            tail[0] = 0;
            stbsp__lead_sign(fl, lead);


            l = (unsigned int)((num + 512) - s);
            if (l == 0) {
                *--s = '0';
                l = 1;
            }
            cs = l + (3 << 24);
            if (pr < 0)
                pr = 0;

            scopy:

            if (pr < (signed int)l)
                pr = l;
            n = pr + lead[0] + tail[0] + tz;
            if (fw < (signed int)n)
                fw = n;
            fw -= n;
            pr -= l;


            if ((fl & 1) == 0) {
                if (fl & 16)
                {
                    pr = (fw > pr) ? fw : pr;
                    fw = 0;
                } else {
                    fl &= ~64;
                }
            }


            if (fw + pr) {
                signed int i;
                unsigned int c;


                if ((fl & 1) == 0)
                    while (fw > 0) {
                    i = fw; if (callback) { int lg = 512 - (int)(bf - buf); if (i > lg) i = lg; };
                    fw -= i;
                    while (i) {
                        if ((((unsigned long long)bf) & 3) == 0)
                            break;
                        *bf++ = ' ';
                        --i;
                    }
                    while (i >= 4) {
                        *(unsigned int *)bf = 0x20202020;
                        bf += 4;
                        i -= 4;
                    }
                    while (i) {
                        *bf++ = ' ';
                        --i;
                    }
                    { if (callback) { { int len = (int)(bf - buf); if ((len + (1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; } };
                }


                sn = lead + 1;
                while (lead[0]) {
                    i = lead[0]; if (callback) { int lg = 512 - (int)(bf - buf); if (i > lg) i = lg; };
                    lead[0] -= (char)i;
                    while (i) {
                        *bf++ = *sn++;
                        --i;
                    }
                    { if (callback) { { int len = (int)(bf - buf); if ((len + (1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; } };
                }


                c = cs >> 24;
                cs &= 0xffffff;
                cs = (fl & 64) ? ((unsigned int)(c - ((pr + cs) % (c + 1)))) : 0;
                while (pr > 0) {
                    i = pr; if (callback) { int lg = 512 - (int)(bf - buf); if (i > lg) i = lg; };
                    pr -= i;
                    if ((fl & 64) == 0) {
                        while (i) {
                            if ((((unsigned long long)bf) & 3) == 0)
                                break;
                            *bf++ = '0';
                            --i;
                        }
                        while (i >= 4) {
                            *(unsigned int *)bf = 0x30303030;
                            bf += 4;
                            i -= 4;
                        }
                    }
                    while (i) {
                        if ((fl & 64) && (cs++ == c)) {
                            cs = 0;
                            *bf++ = stbsp__comma;
                        } else
                            *bf++ = '0';
                        --i;
                    }
                    { if (callback) { { int len = (int)(bf - buf); if ((len + (1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; } };
                }
            }


            sn = lead + 1;
            while (lead[0]) {
                signed int i;
                i = lead[0]; if (callback) { int lg = 512 - (int)(bf - buf); if (i > lg) i = lg; };
                lead[0] -= (char)i;
                while (i) {
                    *bf++ = *sn++;
                    --i;
                }
                { if (callback) { { int len = (int)(bf - buf); if ((len + (1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; } };
            }


            n = l;
            while (n) {
                signed int i;
                i = n; if (callback) { int lg = 512 - (int)(bf - buf); if (i > lg) i = lg; };
                n -= i;
                while (i >= 4) { *(unsigned int *)bf = *(unsigned int *)s; bf += 4; s += 4; i -= 4; }





                    while (i) {
                    *bf++ = *s++;
                    --i;
                }
                { if (callback) { { int len = (int)(bf - buf); if ((len + (1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; } };
            }


            while (tz) {
                signed int i;
                i = tz; if (callback) { int lg = 512 - (int)(bf - buf); if (i > lg) i = lg; };
                tz -= i;
                while (i) {
                    if ((((unsigned long long)bf) & 3) == 0)
                        break;
                    *bf++ = '0';
                    --i;
                }
                while (i >= 4) {
                    *(unsigned int *)bf = 0x30303030;
                    bf += 4;
                    i -= 4;
                }
                while (i) {
                    *bf++ = '0';
                    --i;
                }
                { if (callback) { { int len = (int)(bf - buf); if ((len + (1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; } };
            }


            sn = tail + 1;
            while (tail[0]) {
                signed int i;
                i = tail[0]; if (callback) { int lg = 512 - (int)(bf - buf); if (i > lg) i = lg; };
                tail[0] -= (char)i;
                while (i) {
                    *bf++ = *sn++;
                    --i;
                }
                { if (callback) { { int len = (int)(bf - buf); if ((len + (1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; } };
            }


            if (fl & 1)
                if (fw > 0) {
                while (fw) {
                    signed int i;
                    i = fw; if (callback) { int lg = 512 - (int)(bf - buf); if (i > lg) i = lg; };
                    fw -= i;
                    while (i) {
                        if ((((unsigned long long)bf) & 3) == 0)
                            break;
                        *bf++ = ' ';
                        --i;
                    }
                    while (i >= 4) {
                        *(unsigned int *)bf = 0x20202020;
                        bf += 4;
                        i -= 4;
                    }
                    while (i--)
                        *bf++ = ' ';
                    { if (callback) { { int len = (int)(bf - buf); if ((len + (1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; } };
                }
            }
            break;

            default:
            s = num + 512 - 1;
            *s = f[0];
            l = 1;
            fw = fl = 0;
            lead[0] = 0;
            tail[0] = 0;
            pr = 0;
            dp = 0;
            cs = 0;
            goto scopy;
        }
        ++f;
    }
    endfmt:

    if (!callback)
        *bf = 0;
    else
        { { int len = (int)(bf - buf); if ((len + (512 - 1)) >= 512) { tlen += len; if (0 == (bf = buf = callback(buf, user, len))) goto done; } }; };

    done:
    return tlen + (int)(bf - buf);
}
# 1349 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
extern "C" int stbsp_sprintf(char *buf, char const *fmt, ...)
{
    int result;
    va_list va;
    
# 1353 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   __builtin_va_start(
# 1353 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
   va
# 1353 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   ,
# 1353 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
   fmt
# 1353 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   )
# 1353 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                    ;
    result = stbsp_vsprintfcb(0, 0, buf, fmt, va);
    
# 1355 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   __builtin_va_end(
# 1355 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
   va
# 1355 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   )
# 1355 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
             ;
    return result;
}

typedef struct stbsp__context {
    char *buf;
    int count;
    int length;
    char tmp[512];
} stbsp__context;

static char *stbsp__clamp_callback(const char *buf, void *user, int len)
{
    stbsp__context *c = (stbsp__context *)user;
    c->length += len;

    if (len > c->count)
        len = c->count;

    if (len) {
        if (buf != c->buf) {
            const char *s, *se;
            char *d;
            d = c->buf;
            s = buf;
            se = buf + len;
            do {
                *d++ = *s++;
            } while (s < se);
        }
        c->buf += len;
        c->count -= len;
    }

    if (c->count <= 0)
        return c->tmp;
    return (c->count >= 512) ? c->buf : c->tmp;
}

static char * stbsp__count_clamp_callback( const char * buf, void * user, int len )
{
    stbsp__context * c = (stbsp__context*)user;
    (void) sizeof(buf);

    c->length += len;
    return c->tmp;
}

extern "C" int stbsp_vsnprintf( char * buf, int count, char const * fmt, va_list va )
{
    stbsp__context c;

    if ( (count == 0) && !buf )
    {
        c.length = 0;

        stbsp_vsprintfcb( stbsp__count_clamp_callback, &c, c.tmp, fmt, va );
    }
    else
    {
        int l;

        c.buf = buf;
        c.count = count;
        c.length = 0;

        stbsp_vsprintfcb( stbsp__clamp_callback, &c, stbsp__clamp_callback(0,&c,0), fmt, va );


        l = (int)( c.buf - buf );
        if ( l >= count )
            l = count - 1;
        buf[l] = 0;
    }

    return c.length;
}

extern "C" int stbsp_snprintf(char *buf, int count, char const *fmt, ...)
{
    int result;
    va_list va;
    
# 1437 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   __builtin_va_start(
# 1437 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
   va
# 1437 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   ,
# 1437 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
   fmt
# 1437 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   )
# 1437 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
                    ;

    result = stbsp_vsnprintf(buf, count, fmt, va);
    
# 1440 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   __builtin_va_end(
# 1440 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
   va
# 1440 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h" 3 4
   )
# 1440 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
             ;

    return result;
}

extern "C" int stbsp_vsprintf(char *buf, char const *fmt, va_list va)
{
    return stbsp_vsprintfcb(0, 0, buf, fmt, va);
}
# 1464 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
static signed int stbsp__real_to_parts(signed long long *bits, signed int *expo, double value)
{
    double d;
    signed long long b = 0;


    d = value;

    { int cn; for (cn = 0; cn < 8; cn++) ((char *)&b)[cn] = ((char *)&d)[cn]; };

    *bits = b & ((((unsigned long long)1) << 52) - 1);
    *expo = (signed int)(((b >> 52) & 2047) - 1023);

    return (signed int)((unsigned long long) b >> 63);
}

static double const stbsp__bot[23] = {
    1e+000, 1e+001, 1e+002, 1e+003, 1e+004, 1e+005, 1e+006, 1e+007, 1e+008, 1e+009, 1e+010, 1e+011,
    1e+012, 1e+013, 1e+014, 1e+015, 1e+016, 1e+017, 1e+018, 1e+019, 1e+020, 1e+021, 1e+022
};
static double const stbsp__negbot[22] = {
    1e-001, 1e-002, 1e-003, 1e-004, 1e-005, 1e-006, 1e-007, 1e-008, 1e-009, 1e-010, 1e-011,
    1e-012, 1e-013, 1e-014, 1e-015, 1e-016, 1e-017, 1e-018, 1e-019, 1e-020, 1e-021, 1e-022
};
static double const stbsp__negboterr[22] = {
    -5.551115123125783e-018, -2.0816681711721684e-019, -2.0816681711721686e-020, -4.7921736023859299e-021, -8.1803053914031305e-022, 4.5251888174113741e-023,
    4.5251888174113739e-024, -2.0922560830128471e-025, -6.2281591457779853e-026, -3.6432197315497743e-027, 6.0503030718060191e-028, 2.0113352370744385e-029,
    -3.0373745563400371e-030, 1.1806906454401013e-032, -7.7705399876661076e-032, 2.0902213275965398e-033, -7.1542424054621921e-034, -7.1542424054621926e-035,
    2.4754073164739869e-036, 5.4846728545790429e-037, 9.2462547772103625e-038, -4.8596774326570872e-039
};
static double const stbsp__top[13] = {
    1e+023, 1e+046, 1e+069, 1e+092, 1e+115, 1e+138, 1e+161, 1e+184, 1e+207, 1e+230, 1e+253, 1e+276, 1e+299
};
static double const stbsp__negtop[13] = {
    1e-023, 1e-046, 1e-069, 1e-092, 1e-115, 1e-138, 1e-161, 1e-184, 1e-207, 1e-230, 1e-253, 1e-276, 1e-299
};
static double const stbsp__toperr[13] = {
    8388608,
    6.8601809640529717e+028,
    -7.253143638152921e+052,
    -4.3377296974619174e+075,
    -1.5559416129466825e+098,
    -3.2841562489204913e+121,
    -3.7745893248228135e+144,
    -1.7356668416969134e+167,
    -3.8893577551088374e+190,
    -9.9566444326005119e+213,
    6.3641293062232429e+236,
    -5.2069140800249813e+259,
    -5.2504760255204387e+282
};
static double const stbsp__negtoperr[13] = {
    3.9565301985100693e-040, -2.299904345391321e-063, 3.6506201437945798e-086, 1.1875228833981544e-109,
    -5.0644902316928607e-132, -6.7156837247865426e-155, -2.812077463003139e-178, -5.7778912386589953e-201,
    7.4997100559334532e-224, -4.6439668915134491e-247, -6.3691100762962136e-270, -9.436808465446358e-293,
    8.0970921678014997e-317
};
# 1547 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
static unsigned long long const stbsp__powten[20] = {
    1,
    10,
    100,
    1000,
    10000,
    100000,
    1000000,
    10000000,
    100000000,
    1000000000,
    10000000000ULL,
    100000000000ULL,
    1000000000000ULL,
    10000000000000ULL,
    100000000000000ULL,
    1000000000000000ULL,
    10000000000000000ULL,
    100000000000000000ULL,
    1000000000000000000ULL,
    10000000000000000000ULL
};
# 1611 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/stb_sprintf.h"
static void stbsp__raise_to_power10(double *ohi, double *olo, double d, signed int power)
{
    double ph, pl;
    if ((power >= 0) && (power <= 22)) {
        { double ahi = 0, alo, bhi = 0, blo; signed long long bt; ph = d * stbsp__bot[power]; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&d)[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&ahi)[cn] = ((char *)&bt)[cn]; }; alo = d - ahi; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&stbsp__bot[power])[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bhi)[cn] = ((char *)&bt)[cn]; }; blo = stbsp__bot[power] - bhi; pl = ((ahi * bhi - ph) + ahi * blo + alo * bhi) + alo * blo; };
    } else {
        signed int e, et, eb;
        double p2h, p2l;

        e = power;
        if (power < 0)
            e = -e;
        et = (e * 0x2c9) >> 14;
        if (et > 13)
            et = 13;
        eb = e - (et * 23);

        ph = d;
        pl = 0.0;
        if (power < 0) {
            if (eb) {
                --eb;
                { double ahi = 0, alo, bhi = 0, blo; signed long long bt; ph = d * stbsp__negbot[eb]; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&d)[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&ahi)[cn] = ((char *)&bt)[cn]; }; alo = d - ahi; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&stbsp__negbot[eb])[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bhi)[cn] = ((char *)&bt)[cn]; }; blo = stbsp__negbot[eb] - bhi; pl = ((ahi * bhi - ph) + ahi * blo + alo * bhi) + alo * blo; };
                pl = pl + (d * stbsp__negboterr[eb]);;
            }
            if (et) {
                { double s; s = ph + pl; pl = pl - (s - ph); ph = s; };
                --et;
                { double ahi = 0, alo, bhi = 0, blo; signed long long bt; p2h = ph * stbsp__negtop[et]; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&ph)[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&ahi)[cn] = ((char *)&bt)[cn]; }; alo = ph - ahi; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&stbsp__negtop[et])[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bhi)[cn] = ((char *)&bt)[cn]; }; blo = stbsp__negtop[et] - bhi; p2l = ((ahi * bhi - p2h) + ahi * blo + alo * bhi) + alo * blo; };
                p2l = p2l + (ph * stbsp__negtoperr[et] + pl * stbsp__negtop[et]);;
                ph = p2h;
                pl = p2l;
            }
        } else {
            if (eb) {
                e = eb;
                if (eb > 22)
                    eb = 22;
                e -= eb;
                { double ahi = 0, alo, bhi = 0, blo; signed long long bt; ph = d * stbsp__bot[eb]; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&d)[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&ahi)[cn] = ((char *)&bt)[cn]; }; alo = d - ahi; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&stbsp__bot[eb])[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bhi)[cn] = ((char *)&bt)[cn]; }; blo = stbsp__bot[eb] - bhi; pl = ((ahi * bhi - ph) + ahi * blo + alo * bhi) + alo * blo; };
                if (e) {
                    { double s; s = ph + pl; pl = pl - (s - ph); ph = s; };
                    { double ahi = 0, alo, bhi = 0, blo; signed long long bt; p2h = ph * stbsp__bot[e]; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&ph)[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&ahi)[cn] = ((char *)&bt)[cn]; }; alo = ph - ahi; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&stbsp__bot[e])[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bhi)[cn] = ((char *)&bt)[cn]; }; blo = stbsp__bot[e] - bhi; p2l = ((ahi * bhi - p2h) + ahi * blo + alo * bhi) + alo * blo; };
                    p2l = p2l + (stbsp__bot[e] * pl);;
                    ph = p2h;
                    pl = p2l;
                }
            }
            if (et) {
                { double s; s = ph + pl; pl = pl - (s - ph); ph = s; };
                --et;
                { double ahi = 0, alo, bhi = 0, blo; signed long long bt; p2h = ph * stbsp__top[et]; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&ph)[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&ahi)[cn] = ((char *)&bt)[cn]; }; alo = ph - ahi; { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bt)[cn] = ((char *)&stbsp__top[et])[cn]; }; bt &= ((~(unsigned long long)0) << 27); { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bhi)[cn] = ((char *)&bt)[cn]; }; blo = stbsp__top[et] - bhi; p2l = ((ahi * bhi - p2h) + ahi * blo + alo * bhi) + alo * blo; };
                p2l = p2l + (ph * stbsp__toperr[et] + pl * stbsp__top[et]);;
                ph = p2h;
                pl = p2l;
            }
        }
    }
    { double s; s = ph + pl; pl = pl - (s - ph); ph = s; };
    *ohi = ph;
    *olo = pl;
}





static signed int stbsp__real_to_str(char const **start, unsigned int *len, char *out, signed int *decimal_pos, double value, unsigned int frac_digits)
{
    double d;
    signed long long bits = 0;
    signed int expo, e, ng, tens;

    d = value;
    { int cn; for (cn = 0; cn < 8; cn++) ((char *)&bits)[cn] = ((char *)&d)[cn]; };
    expo = (signed int)((bits >> 52) & 2047);
    ng = (signed int)((unsigned long long) bits >> 63);
    if (ng)
        d = -d;

    if (expo == 2047)
    {
        *start = (bits & ((((unsigned long long)1) << 52) - 1)) ? "NaN" : "Inf";
        *decimal_pos = 0x7000;
        *len = 3;
        return ng;
    }

    if (expo == 0)
    {
        if (((unsigned long long) bits << 1) == 0)
        {
            *decimal_pos = 1;
            *start = out;
            out[0] = '0';
            *len = 1;
            return ng;
        }

        {
            signed long long v = ((unsigned long long)1) << 51;
            while ((bits & v) == 0) {
                --expo;
                v >>= 1;
            }
        }
    }


    {
        double ph, pl;


        tens = expo - 1023;
        tens = (tens < 0) ? ((tens * 617) / 2048) : (((tens * 1233) / 4096) + 1);


        stbsp__raise_to_power10(&ph, &pl, d, 18 - tens);


        { double ahi = 0, alo, vh, t; bits = (signed long long)ph; vh = (double)bits; ahi = (ph - vh); t = (ahi - ph); alo = (ph - (ahi - t)) - (vh + t); bits += (signed long long)(ahi + alo + pl); };


        if (((unsigned long long)bits) >= (1000000000000000000ULL))
            ++tens;
    }


    frac_digits = (frac_digits & 0x80000000) ? ((frac_digits & 0x7ffffff) + 1) : (tens + frac_digits);
    if ((frac_digits < 24)) {
        unsigned int dg = 1;
        if ((unsigned long long)bits >= stbsp__powten[9])
            dg = 10;
        while ((unsigned long long)bits >= stbsp__powten[dg]) {
            ++dg;
            if (dg == 20)
                goto noround;
        }
        if (frac_digits < dg) {
            unsigned long long r;

            e = dg - frac_digits;
            if ((unsigned int)e >= 24)
                goto noround;
            r = stbsp__powten[e];
            bits = bits + (r / 2);
            if ((unsigned long long)bits >= stbsp__powten[dg])
                ++tens;
            bits /= r;
        }
        noround:;
    }


    if (bits) {
        unsigned int n;
        for (;;) {
            if (bits <= 0xffffffff)
                break;
            if (bits % 1000)
                goto donez;
            bits /= 1000;
        }
        n = (unsigned int)bits;
        while ((n % 1000) == 0)
            n /= 1000;
        bits = n;
        donez:;
    }


    out += 64;
    e = 0;
    for (;;) {
        unsigned int n;
        char *o = out - 8;

        if (bits >= 100000000) {
            n = (unsigned int)(bits % 100000000);
            bits /= 100000000;
        } else {
            n = (unsigned int)bits;
            bits = 0;
        }
        while (n) {
            out -= 2;
            *(unsigned short *)out = *(unsigned short *)&stbsp__digitpair.pair[(n % 100) * 2];
            n /= 100;
            e += 2;
        }
        if (bits == 0) {
            if ((e) && (out[0] == '0')) {
                ++out;
                --e;
            }
            break;
        }
        while (out != o) {
            *--out = '0';
            ++e;
        }
    }

    *decimal_pos = tens;
    *start = out;
    *len = e;
    return ng;
}
# 170 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 2




inline s32
ParseJson(memory_arena *VolatileMemory, char const *Json, size_t JsonLength, jsmntok_t **TokenArray)
{
    s32 NumTokensProcessed = 0;
    if(!(*TokenArray))
    {
        jsmn_parser Parser;
        jsmn_init(&Parser);
        s32 NumTokensExisting = jsmn_parse(&Parser, Json, JsonLength, 
# 182 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h" 3 4
                                                                     __null
# 182 "/home/amos/prog/c/amos_libraries/preprocessor/test/Generated_Test.h"
                                                                         , 0);
        if(NumTokensExisting > 0)
        {


            *TokenArray = (jsmntok_t*)abm_PushSize_(VolatileMemory, ((NumTokensExisting+1))*sizeof(jsmntok_t));
            jsmn_init(&Parser);
            NumTokensProcessed = jsmn_parse(&Parser, Json, JsonLength, *TokenArray, NumTokensExisting);
        }
    }
    else
    {
        NumTokensProcessed = (*TokenArray)->size;
    }

    return NumTokensProcessed;
}

inline u32
StartGroup(char *Json, u32 MaxLength)
{
    u32 Length = 0;
    if (MaxLength >= 1)
    {
        Json[0] = '{';
        ++Length;
    }

    return Length;
}

inline u32
EndGroup(char *Json, u32 MaxLength, b8 isLast = false)
{
    u32 Length = 0;
    if(isLast && MaxLength >= 1)
    {
        Json[0] = '}';
        ++Length;
    }
    else if(!isLast && MaxLength >= 2)
    {
        Json[0] = '}';
        Json[1] = ',';
        Length += 2;
    }

    return Length;
}

inline abs_stringptr
TokenToStringPtr(char const *Json, jsmntok_t *Token)
{
    abs_stringptr Result;
    Result.String = &Json[Token->start];
    Result.Length = (Token->end-Token->start);

    return Result;
}

inline b8
TokenEquals(char const* Json, jsmntok_t *Token, char const* Value)
{
    u32 TokenLength = Token->end-Token->start;
    b8 Result =
        abs_AreStringsEqual(&Json[Token->start], TokenLength, Value, abs_StringLength(Value, TokenLength), true);

    return Result;
}





template<>
auto StringToEnum<test_cmd>(const char *String) -> test_cmd
{
    u32 StringIndex = abs_FindInList(String, test_cmd_Count, test_cmd_Strings, true);
    test_cmd Result = test_cmd::NOP;
    if(StringIndex < test_cmd_Count)
    {
        Result = static_cast<test_cmd>(StringIndex);
    }
    return Result;
}
template<>
auto StringToEnum<test_cmd>(abs_stringptr String) -> test_cmd
{
    u32 StringIndex = abs_FindInList(String, test_cmd_Count, test_cmd_Strings, true);
    test_cmd Result = test_cmd::NOP;
    if(StringIndex < test_cmd_Count)
    {
        Result = static_cast<test_cmd>(StringIndex);
    }
    return Result;
}
constexpr const char *
EnumToCString(test_cmd EnumToken)
{
    return test_cmd_Strings[int(EnumToken)].String;
}

constexpr abs_stringptr
EnumToString(test_cmd EnumToken)
{
    return test_cmd_Strings[int(EnumToken)];
}



u32
PushJson(char *Json, u32 MaxLength, char const *Tag, Colours Type, u32 JsonFlags = 0)
{
    u32 Length = 0;
    b8 isLast = (JsonFlags & JSON_IsLastInList);
    Length += stbsp_snprintf(Json, MaxLength, "\"%s\":\"%s\"", Tag, EnumToCString(Type));
    if(!isLast) { Json[Length++] = ','; }
    return Length;
}

jsmntok_t *JsonToObject(memory_arena *VolatileMemory, char const *Json, size_t JsonLength, jsmntok_t *TokenArray, Colours *ObjectOut, u32 Unused)
{
    Colours Result = static_cast<Colours>(0);
    s32 NumTokensUsed = 0;

    s32 TotalTokens = ParseJson(VolatileMemory, Json, JsonLength, &TokenArray);
    if(TokenArray)
    {
        s32 Index = 0;
        if((TokenArray[Index].type == JSMN_OBJECT) &&
           (TotalTokens > 1))
        {
            ++Index;
        }
        if(TokenArray[Index].type == JSMN_STRING)
        {
            s32 TokenLength = (TokenArray[Index].end - TokenArray[Index].start);
            abs_stringptr EnumString = {&Json[TokenArray[Index].start], TokenLength};
            Result = StringToEnum<Colours>(EnumString);
            NumTokensUsed = Index;
        }
        else
        {
            NumTokensUsed = Index;
        }
    }
    *ObjectOut = Result;
    return TokenArray + NumTokensUsed;
}

template<>
auto StringToEnum<Colours>(const char *String) -> Colours
{
    u32 StringIndex = abs_FindInList(String, Colours_Count, Colours_Strings, true);
    Colours Result = Colours::Red;
    if(StringIndex < Colours_Count)
    {
        Result = static_cast<Colours>(StringIndex);
    }
    return Result;
}
template<>
auto StringToEnum<Colours>(abs_stringptr String) -> Colours
{
    u32 StringIndex = abs_FindInList(String, Colours_Count, Colours_Strings, true);
    Colours Result = Colours::Red;
    if(StringIndex < Colours_Count)
    {
        Result = static_cast<Colours>(StringIndex);
    }
    return Result;
}
constexpr const char *
EnumToCString(Colours EnumToken)
{
    return Colours_Strings[int(EnumToken)].String;
}

constexpr abs_stringptr
EnumToString(Colours EnumToken)
{
    return Colours_Strings[int(EnumToken)];
}

const char *
EnumToLabel_Object(Colours EnumToken)
{
    return Colours_LabelObject[int(EnumToken)];
}



inline void
InitializeQueue(test_cmd_queue *Queue)
{
  Queue->Front = Queue->Rear = -1;
}

inline b8
isQueueEmpty(test_cmd_queue *Queue)
{
  b8 Result = (Queue->Front == -1);
  return Result;
}

inline b8
isQueueFull(test_cmd_queue *Queue)
{
  b8 Result = (Queue->Front == Queue->Rear + 1) ||
  (Queue->Front == 0 && Queue->Rear == (10-1));

  return Result;
}

b8
Enqueue(test_cmd_queue *Queue, test_cmd Cmd)
{
  b8 Result = false;
  if(!isQueueFull(Queue))
  {
    if(Queue->Front == -1)
    {
      Queue->Front = 0;
    }
    Queue->Rear = (Queue->Rear + 1) % 10;
    Queue->Items[Queue->Rear] = Cmd;

    Result = true;
  }
  return Result;
}

test_cmd
Dequeue(test_cmd_queue *Queue)
{
test_cmd Result = (test_cmd)0;
if(!isQueueEmpty(Queue))
{
Result = Queue->Items[Queue->Front];
if(Queue->Front == Queue->Rear)
{
Queue->Front = Queue->Rear = -1;
}
else
{
Queue->Front = (Queue->Front + 1) % 10;
}
}

return Result;
}





inline b8
GoToState(test_type *State, test_statemachine *NewState)
{
    b8 isChanged = false;
    if(NewState && State)
    {
        State->CurrentState = NewState;
        State->isNewState = true;
    }

    return isChanged;
}

char const*
GetStateName(test_statemachine *StateName)
{
if(StateName == Idle) {return "Idle";}
if(StateName == Running) {return "Running";}
return "Unknown";
}

b8
EnqueueCommand(test_type *State, test_cmd Cmd)
{
return Enqueue(&State->CommandQueue, Cmd);
}

test_cmd
DequeueCommand(test_type *State)
{
return Dequeue(&State->CommandQueue);
}





u32 PushJson(char *Json, u32 MaxLength, char const*Tag, const my_json_test &Value, u32 JsonFlags = 0)
{
    u32 Length = 0;
    b8 isLast = (JsonFlags & JSON_IsLastInList);
    if(JsonFlags & JSON_BaseObject)
    {
        Json[Length++] = '{';
    }
    if(!(JsonFlags & JSON_DontUseTag))
    {
          Length += stbsp_snprintf(&Json[Length], MaxLength, "\"%s\":", Tag);
    }
    Length += StartGroup(&Json[Length], (MaxLength - Length));
Length += stbsp_snprintf(&Json[Length], (MaxLength - Length), "\"TestUnsigned\":%u,", (Value.TestUnsigned));
{
size_t StringLen = abs_StringLength(Value.TestString, 50);
Length += stbsp_snprintf(&Json[Length], (MaxLength - Length), "\"TestString\":\"%.*s\",", (s32)StringLen, Value.TestString);
}
Length += PushJson(&Json[Length], (MaxLength - Length), "MyColour", (Value.MyColour), JSON_Null);
Length += stbsp_snprintf(&Json[Length], (MaxLength - Length), "\"isValue\":%s ", ( (Value.isValue) ? "true" : "false"));
    Length += EndGroup(&Json[Length], (MaxLength - Length), isLast);
    if(JsonFlags & JSON_BaseObject)
    {
        Json[Length++] = '}';
    }
    return Length;
}

jsmntok_t *JsonToObject(memory_arena *VolatileMemory, char const *Json, size_t JsonLength, jsmntok_t *TokenArray, my_json_test *ObjectOut, my_json_test_existlist *ItemsExistOut)
{
    my_json_test_existlist* ItemExists = (my_json_test_existlist*)abm_PushSize_(VolatileMemory, sizeof(my_json_test_existlist));
    s32 NumTokensProcessed = ParseJson(VolatileMemory, Json, JsonLength, &TokenArray);
    jsmntok_t *Token = TokenArray;
    if(Token)
    {
        s32 NumTokensToProcess = Token->size;
        s32 ObjectEndPosition = Token->end;
        for(s32 Index = 0; Index < NumTokensToProcess; ++Index)
        {
            ++Token;
            s32 TokenLength = Token->end - Token->start;

            if((abs_AreStringsEqual(&Json[Token->start], TokenLength, "TestUnsigned",((sizeof("TestUnsigned")) / (sizeof("TestUnsigned"[1]))-1), true)) &&
               ((Token+1)->type == JSMN_PRIMITIVE))
{
            ItemExists->TestUnsigned = true;
    ++Token;
     (ObjectOut->TestUnsigned) = (u8)atoi(&Json[Token->start]);
}

            if((abs_AreStringsEqual(&Json[Token->start], TokenLength, "TestString",((sizeof("TestString")) / (sizeof("TestString"[1]))-1), true)) &&
               ((Token+1)->type == JSMN_STRING))
{
            ItemExists->TestString = true;
    ++Token;
    TokenLength = Token->end - Token->start;
    s32 Length = (((TokenLength) < ((50-1))) ? (TokenLength) : ((50-1)));
    strncpy(ObjectOut->TestString, &Json[Token->start], Length);
    ObjectOut->TestString[Length] = 0;
}

            if((abs_AreStringsEqual(&Json[Token->start], TokenLength, "MyColour",((sizeof("MyColour")) / (sizeof("MyColour"[1]))-1), true)) &&
               (((Token+1)->type == JSMN_STRING) || ((Token+1)->type == JSMN_OBJECT)))
{
            ItemExists->MyColour = true;
Token = JsonToObject(VolatileMemory, Json, JsonLength, ++Token, &ObjectOut->MyColour,0);
}

            if((abs_AreStringsEqual(&Json[Token->start], TokenLength, "isValue",((sizeof("isValue")) / (sizeof("isValue"[1]))-1), true)) &&
               ((Token+1)->type == JSMN_PRIMITIVE))
{
            ItemExists->isValue = true;
    ++Token;
     (ObjectOut->isValue) = (strncmp(&Json[Token->start],"true",4) == 0);
}


}
}
if(ItemsExistOut)
{
    *ItemsExistOut = *ItemExists;
}
return Token;
}

u32
JsonArrayToObjectArray(memory_arena *VolatileMemory, char const *Json, size_t JsonLength, my_json_test **ObjectArray, my_json_test_existlist **ObjectArrayExists)
{
   u32 NumberOfObjects = 0;

    jsmntok_t *TokenArray = 0;
    s32 NumTokensParsed = ParseJson(VolatileMemory, Json, JsonLength, &TokenArray);

    if(TokenArray)
    {
        u32 TokenIndex = 0;
        jsmntok_t *Token = &TokenArray[TokenIndex++];
        if(Token->type == JSMN_OBJECT)
        {

            ++TokenIndex;
            Token = &TokenArray[TokenIndex++];
        }

        if(Token->type == JSMN_ARRAY)
        {
            NumberOfObjects= Token->size;
            ++Token;
        }
        else if(Token->type == JSMN_OBJECT)
        {
            NumberOfObjects = 1;
        }

        if (!(*ObjectArray))
        {
            *ObjectArray = (my_json_test*)abm_PushSize_(VolatileMemory, (NumberOfObjects)*sizeof(my_json_test));
        }
        if (!(*ObjectArrayExists))
        {
            *ObjectArrayExists = (my_json_test_existlist*)abm_PushSize_(VolatileMemory, (NumberOfObjects)*sizeof(my_json_test_existlist));
        }

        for(u32 Index = 0; Index < NumberOfObjects; ++Index)
        {
            Token = JsonToObject(VolatileMemory, Json, JsonLength, Token, &(*ObjectArray)[Index],&(*ObjectArrayExists)[Index]);
            ++Token;
        }
    }
    return NumberOfObjects;
}
# 55 "/home/amos/prog/c/amos_libraries/preprocessor/test/PreprocTest.cpp" 2


# 1 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 1
# 114 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
    jsmntok_t *tok;
    if (parser->toknext >= num_tokens) {
        return 
# 118 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
              __null
# 118 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                  ;
    }
    tok = &tokens[parser->toknext++];
    tok->start = tok->end = -1;
    tok->size = 0;



    return tok;
}




static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
    token->type = type;
    token->start = start;
    token->end = end;
    token->size = 0;
}




static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
    jsmntok_t *token;
    int start;

    start = parser->pos;

    for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
        switch (js[parser->pos]) {


            case ':':

            case '\t':
            case '\r':
            case '\n':
            case ' ':
            case ',':
            case ']':
            case '}':
            goto found;
            default:

            break;
        }
        if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
            parser->pos = start;
            return JSMN_ERROR_INVAL;
        }
    }






    found:
    if (tokens == 
# 181 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                 __null
# 181 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                     ) {
        parser->pos--;
        return 0;
    }
    token = jsmn_alloc_token(parser, tokens, num_tokens);
    if (token == 
# 186 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                __null
# 186 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                    ) {
        parser->pos = start;
        return JSMN_ERROR_NOMEM;
    }
    jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);



    parser->pos--;
    return 0;
}




static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
    jsmntok_t *token;

    int start = parser->pos;

    parser->pos++;


    for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
        char c = js[parser->pos];


        if (c == '\"') {
            if (tokens == 
# 216 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                         __null
# 216 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                             ) {
                return 0;
            }
            token = jsmn_alloc_token(parser, tokens, num_tokens);
            if (token == 
# 220 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                        __null
# 220 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                            ) {
                parser->pos = start;
                return JSMN_ERROR_NOMEM;
            }
            jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);



            return 0;
        }


        if (c == '\\' && parser->pos + 1 < len) {
            int i;
            parser->pos++;
            switch (js[parser->pos]) {

                case '\"':
                case '/':
                case '\\':
                case 'b':
                case 'f':
                case 'r':
                case 'n':
                case 't':
                break;

                case 'u':
                parser->pos++;
                for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
                     i++) {

                    if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||
                          (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||
                          (js[parser->pos] >= 97 && js[parser->pos] <= 102))) {
                        parser->pos = start;
                        return JSMN_ERROR_INVAL;
                    }
                    parser->pos++;
                }
                parser->pos--;
                break;

                default:
                parser->pos = start;
                return JSMN_ERROR_INVAL;
            }
        }
    }
    parser->pos = start;
    return JSMN_ERROR_PART;
}




extern int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
    int r;
    int i;
    jsmntok_t *token;
    int count = parser->toknext;

    for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
        char c;
        jsmntype_t type;

        c = js[parser->pos];
        switch (c) {
            case '{':
            case '[':
            count++;
            if (tokens == 
# 292 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                         __null
# 292 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                             ) {
                break;
            }
            token = jsmn_alloc_token(parser, tokens, num_tokens);
            if (token == 
# 296 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                        __null
# 296 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                            ) {
                return JSMN_ERROR_NOMEM;
            }
            if (parser->toksuper != -1) {
                jsmntok_t *t = &tokens[parser->toksuper];






                t->size++;



            }
            token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
            token->start = parser->pos;
            parser->toksuper = parser->toknext - 1;
            break;
            case '}':
            case ']':
            if (tokens == 
# 318 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                         __null
# 318 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                             ) {
                break;
            }
            type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
# 345 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
            for (i = parser->toknext - 1; i >= 0; i--) {
                token = &tokens[i];
                if (token->start != -1 && token->end == -1) {
                    if (token->type != type) {
                        return JSMN_ERROR_INVAL;
                    }
                    parser->toksuper = -1;
                    token->end = parser->pos + 1;
                    break;
                }
            }

            if (i == -1) {
                return JSMN_ERROR_INVAL;
            }
            for (; i >= 0; i--) {
                token = &tokens[i];
                if (token->start != -1 && token->end == -1) {
                    parser->toksuper = i;
                    break;
                }
            }

            break;
            case '\"':
            r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
            if (r < 0) {
                return r;
            }
            count++;
            if (parser->toksuper != -1 && tokens != 
# 375 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                                                   __null
# 375 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                                                       ) {
                tokens[parser->toksuper].size++;
            }
            break;
            case '\t':
            case '\r':
            case '\n':
            case ' ':
            break;
            case ':':
            parser->toksuper = parser->toknext - 1;
            break;
            case ',':
            if (tokens != 
# 388 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                         __null 
# 388 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                              && parser->toksuper != -1 &&
                tokens[parser->toksuper].type != JSMN_ARRAY &&
                tokens[parser->toksuper].type != JSMN_OBJECT) {



                for (i = parser->toknext - 1; i >= 0; i--) {
                    if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
                        if (tokens[i].start != -1 && tokens[i].end == -1) {
                            parser->toksuper = i;
                            break;
                        }
                    }
                }

            }
            break;
# 431 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
            default:

            r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
            if (r < 0) {
                return r;
            }
            count++;
            if (parser->toksuper != -1 && tokens != 
# 438 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                                                   __null
# 438 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                                                       ) {
                tokens[parser->toksuper].size++;
            }
            break;






        }
    }

    if (tokens != 
# 451 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h" 3 4
                 __null
# 451 "/home/amos/prog/c/amos_libraries/preprocessor/test/../../include/jsmn.h"
                     ) {
        for (i = parser->toknext - 1; i >= 0; i--) {

            if (tokens[i].start != -1 && tokens[i].end == -1) {
                return JSMN_ERROR_PART;
            }
        }
    }

    return count;
}





extern void jsmn_init(jsmn_parser *parser) {
    parser->pos = 0;
    parser->toknext = 0;
    parser->toksuper = -1;
}
# 58 "/home/amos/prog/c/amos_libraries/preprocessor/test/PreprocTest.cpp" 2


void Idle(test_type *State, test_cmd Cmd, int Int, char const *String)
{
    if(State->isNewState)
    {
        State->isNewState = false;
        printf("%s ", GetStateName(State->CurrentState));
    }
    else
    {
        GoToState(State, Running);
        printf("i\n");
    }
}

void Running(test_type *State, test_cmd Cmd, int Int, char const *String)
{
    if(State->isNewState)
    {
        State->isNewState = false;
        printf("%s ", GetStateName(State->CurrentState));
    }
    else
    {
        GoToState(State, Idle);
        printf("r\n");
    }
}

void
PrintQueue(test_cmd_queue *Queue)
{
    printf("Current Queue: ");
    if(isQueueEmpty(Queue))
    {
        printf("Empty");
    }
    else
    {
        for (u32 i = 0; i < (sizeof(Queue->Items)) / (sizeof(Queue->Items[1])); ++i)
        {
            if(Queue->Front == (s32)i)
            {
                printf("<");
            }
            printf("%s", EnumToCString(Queue->Items[i]));
            if(Queue->Rear == (s32)i)
            {
                printf(">");
            }
            printf(" ");

        }
    }

    printf("\n");
}

int
main(int argc, char* argv[])
{

    printf("Print Strings:\n");
    for(u32 i = 0; i < Colours_Count; ++i)
    {
        Colours C = (Colours)i;
        abs_stringptr S = EnumToString(C);
        printf("  - %.*s\n", S.Length, S.String);
    }
    printf("\n");

    printf("Print Labels: \n");
    for(u32 i = 0; i < Colours_Count; ++i)
    {
        abs_stringptr S = EnumToLabel_Object((Colours)i);
        printf("  - %.*s\n", S.Length, S.String);
    }

    test_type TestMachine = {};
    GoToState(&TestMachine, Idle);
    InitializeQueue(&TestMachine.CommandQueue);
    for(u32 i = 0; i < 20; ++i)
    {
        (TestMachine.CurrentState)(&TestMachine, test_cmd::Command1, i, "Some String");
    }

    auto Deq = [&TestMachine]() -> void
    {
        printf("Dequeued: %s\n", EnumToCString(DequeueCommand(&TestMachine)));
    };

    auto Enq = [&TestMachine](test_cmd Cmd) -> void
    {
        if(EnqueueCommand(&TestMachine, Cmd))
            printf("Enqueued: %s\n", EnumToCString(Cmd));
        else
            printf("Couldn't queue: %s.\n", EnumToCString(Cmd));
    };

    Enq(test_cmd::Command1);
    Deq();
    Enq(test_cmd::Command1);
    Enq(test_cmd::Command2);
    PrintQueue(&TestMachine.CommandQueue);
    DequeueCommand(&TestMachine);
    PrintQueue(&TestMachine.CommandQueue);
    Enq(test_cmd::Command2);
    Enq(test_cmd::Command3);
    Enq(test_cmd::Command4);
    Enq(test_cmd::Command2);
    Enq(test_cmd::Command3);
    Enq(test_cmd::Command4);
    Enq(test_cmd::Command2);
    Enq(test_cmd::Command3);
    Enq(test_cmd::Last);
    Enq(test_cmd::Last);
    PrintQueue(&TestMachine.CommandQueue);
    Deq();
    Enq(test_cmd::Command4);
    PrintQueue(&TestMachine.CommandQueue);
    Deq();
    Deq();
    Deq();
    Deq();
    Deq();
    Deq();
    Deq();
    Deq();
    PrintQueue(&TestMachine.CommandQueue);
    Deq();
    Deq();
    Deq();
    Deq();
    Deq();
    PrintQueue(&TestMachine.CommandQueue);

    size_t Size = (1024ULL * (1024ULL * (1024ULL * (1))));
    void *MemoryPtr = abm_AllocateOsMemory(0, Size);
    memory_arena Memory = abm_InitMemory(MemoryPtr, Size);

    u32 JsonSize = (1024ULL * (5));
    char *Json = (char*)abm_PushSize_(&Memory, (JsonSize)*sizeof(char));
    my_json_test Test = {};
    Test.TestUnsigned = 10;
    snprintf(Test.TestString, 50, "Hello");
    Test.MyColour = Colours::Red;
    Test.isValue = true;

    u32 JsonLength = PushJson(Json, JsonSize, 0, Test, JSON_DontUseTag | JSON_IsLastInList);

    printf("\n--- JSON: %d \n%s\n---\n", JsonLength, Json);

    my_json_test Test2 = {};
    my_json_test_existlist Test2Exists;
    JsonToObject(&Memory, Json, JsonLength, 0, &Test2, &Test2Exists);
    printf("Test: \n"
           " - %u\n"
           " - %s\n"
           " - %s\n"
           " - %s\n\n",
           Test2.TestUnsigned, Test2.TestString, EnumToCString(Test2.MyColour),
           (Test2.isValue ? "true" : "false"));

    printf("\n\nDone\n");

    return 0;
}
