/// States /////////

// State: SM_SOME_STATEMACHINE //
struct state_type;
enum class state_cmd;
struct my_type;
enum class my_enum;
#define SM_SOME_STATEMACHINE(name) void name(state_type State, state_cmd Cmd, my_type *Type, int Int, char const *String)
typedef SM_SOME_STATEMACHINE(sm_some_statemachine);

// Function Headers
inline b8 GoToState(state_type *State, sm_some_statemachine *NewState);
char const* GetStateName(sm_some_statemachine *StateName)
SM_SOME_STATEMACHINE(Idle);
SM_SOME_STATEMACHINE(Running);

"// State: SM_SOME_STATEMACHINE\n"
"// Function Definitions\n"
"inline b8\n"
"GoToState(state_type *State, sm_some_statemachine *NewState)\n"
"{\n"
"b8 isChanged = false;\n"
"if(NewState && State)\n"
"{\n"
"State->CurrentState = NewState;\n"
"isChanged = true;\n"
"}\n"
"\n"
"return isChanged;\n"
"}\n"
"\n"
"char const*\n"
"GetStateName(sm_some_statemachine *StateName)\n"
"{\n"
"if(StateName == Idle) {return "Idle";}\n"
"if(StateName == Running) {return "Running";}\n"
"return "Unknown";\n"
"}\n"

"struct state_cmd_queue\n"
"{\n"
"state_cmd Items[10];\n"
"s32 Front;\n"
"s32 Rear;\n"
"}\n"
"\n"
"inline void\n"
"InitializeQueue(state_cmd_queue *Queue)\n"
"{\n"
"Queue->Commands = {0};\n"
"Queue->Front = Queue->Rear = -1;\n"
"}\n"
"\n"
"inline b8\n"
"isQueueEmpty(state_cmd_queue *Queue)\n"
"{\n"
"b8 Result = (Queue->Front == -1);\n"
"return Result;\n"
"}\n"
"\n"
"inline b8 \n"
"isQueueFull(state_cmd_queue *Queue)\n"
"{\n"
"b8 Result = (Queue->Front == Queue->Rear + 1) ||\n"
"(Queue->Front == 0 && Queue->Rear == ArrayCount(Queue->Commands)-1);\n"
"\n"
"return Result;\n"
"}\n"
"\n"
"b8\n"
"EnqueueCommand(state_cmd_queue *Queue, state_cmd Cmd)\n"
"{\n"
"b8 Result = false;\n"
"if(!isQueueFull(Queue))\n"
"{\n"
"if(Queue->Front == -1)\n"
"{\n"
"Queue->Front = 0;\n"
"}\n"
"Queue->Rear = (Queue->Rear + 1) % ArrayCount(Queue->Commands);\n"
"Queue->Commands[Queue->Rear] = Cmd;\n"
"\n"
"Result = true;\n"
"}\n"
"return Result;    \n"
"}\n"
"\n"
"state_cmd\n"
"DequeueCommand(state_cmd_queue *Queue)\n"
"{\n"
"state_cmd Result = (state_cmd)0;\n"
"if(!isQueueEmpty(Queue))\n"
"{\n"
"Result = Queue->Commands[Queue->Front];\n"
"if(Queue->Front == Queue->Rear)\n"
"{\n"
"Queue->Front = Queue->Rear = -1;\n"
"}\n"
"else \n"
"{\n"
"Queue->Front = (Queue->Front + 1) % ArrayCount(Queue->Commands);\n"
"}\n"
"}\n"
"\n"
"return Result;\n"
"}\n"
"\n"
"b8\n"
"EnqueueCommand(state_type *State, state_cmd Cmd)\n"
"{\n"
"return Enqueue(&State->CommandQueue, Cmd);\n"
"}\n"
"\n"
"state_cmd\n"
"DequeueCommand(state_type *State)\n"
"{\n"
"return Dequeue(&State->CommandQueue);\n"
"}\n"


////////////////////
